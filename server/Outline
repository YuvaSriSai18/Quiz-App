Backend Part

    1. Authentication
        |_Passwordless SignIn (Stores users in Mongo)
    2. Database Storage
        |__Mongo DB

        DB Collections
            2.1 Question Schema  ✅
                2.1.1.{
                    question:string,
                    options:["","","",""],
                    correctOption:"",
                    mark:double default 1
                }
            2.2 Question Papers Schema  ✅
                2.2.1. {
                    QuizId:string,
                    CreaterMail:string,
                    title:string,
                    noOfQuestions:number,
                    questions:[
                        {
                            new Question
                        }
                    ],
                    openTime:time,
                    closeTime:time
                }
            2.3 StudentUser Schema   ✅
                2.3.1. {
                    mail:string, // here we retrieve the mail from the authenticated part 
                    rollNo:string
                    name: string
                    successRate:double 
                    attemptedQuizes : [
                        {
                            QuizId:string,
                            quizTitle:string,
                            optedOptions: string []
                            pointsEarned:double initial 0
                        }
                    ]
                    points:null default 0,
                    pointsCalculator:()=>{
                         return ((this.points + this.attemptedQuizes[attemptedQuizes.length - 1].pointsEarned)/attemptedQuizes.length)
                    }

                }
            2.4 Responses Schema  ✅
                2.4.1. [
                        {
                            quizId: string,
                            correctAnswers : [
                                {
                                    questionNumber: Number,
                                    givenAns: String
                                }
                            ],
                            responses: [
                                {
                                    studentMail: String,
                                    studentName: String,
                                    answersGivenByUser: [
                                        {
                                            questionNumber: Number,
                                            givenAns: String
                                        }
                                    ],
                                    marksObtained: Number,
                                    createdAt: { type: Date, default: Date.now },
                                }
                            ],
                        }
                    ]


Features to be implemented
    1. LeaderBoard    
        1.1 Position  ❌
        1.2 Name  ✅
        1.3 Points ✅
    2. Creating Quiz Forms  (CRUD)   ✅
    3. disable screenshot // optional
    4. blocking navigation //optional
    5. Dashboard    ✅
        5.1 Student Dashboard  //  If possible we retrieve the data from college Database
            5.1.1 Regd No 
            5.1.2 Name
            5.1.3 Branch
            5.1.4 Year
            5.1.5 Section
            5.1.6 Email
        5.2 Lecturer Dashboard    //  If possible we retrieve the data from college Database
            5.2.1 Name
            5.2.2 Branch
            5.2.3 Mail 
            5.2.4 Regd No
    6. Join Room ❌ // Process
        6.1 join room (user will enter room number) => { Here we keep a middleware that checks the room number , if True next() else return}
        6.2 quiz name (ensure that quiz details are correct) =>
        6.3 instructions and details (quiz instructions) =>
        6.4 Take Quiz =>
        6.5 Automatically Room should be closed when the timer is set to 0


Current important things need to be done by 4th:
1. Quiz questions Card ✅
2. Handle Responses   -- Here we have to handle each question answer given by user  ✅
3. Evaluate Given Responses and allocate points.   -- Evaluate the given answer with the actual answer if yes, increament 1 mark else increament by 0  ✅
4. LeaderBoard after each Question -- have to show leaderboard after that question for the students within that room who has answered  ✅
5. leaderboard after the quiz -- At last we have to show leaderboard for whole quiz ,like who will be the toppest (Top 20 only)  ✅
6. creating logic for the leaderboard calculation ✅
7. Join Room Feature ❌

    Example of how we calculate the quiz marks obtained to give the stars in the leaderboard as there is no score 
        Here is an example:

            Quiz 1: 

                Maximum score: 50
                Student A's score: 40
                Normalized score: (40/50) x 100 = 80

            Quiz 2:

                Maximum score: 100
                Student A's score: 90
                Normalized score: (90/100)x 100 = 90
                
            Quiz 3:

                Maximum score: 20
                Student A's score: 18
                Normalized score: (18/20)x 100 = 90
                
                To find the average normalized score for Student A over these three quizzes:

                S_average = (80 + 90 + 90 ) / 3 = 86.67

            if (percentage >= 90) {
                stars = 5;
            } else if (percentage >= 75) {
                stars = 4;
            } else if (percentage >= 60) {
                stars = 3;
            } else if (percentage >= 45) {
                stars = 2;
            } else if (percentage >= 30) {
                stars = 1;
            } else {
                stars = 0;
            }


New features need to be implemented after website goes live:
1 Classes wise
2 Room creation
3 Lock Room
4 Class wise LeaderBoard


On 7 Aug
1. Have to implement join room and socket capability to leaderboard functionality because Dur to latency in DB 
2. Have to modify the leaderBoard page i.e have to add confetti and sadConfetti
3. Have to add LeaderBoard Ranking by indexing in the DB
4. Have to add the data set for the score Graphs in Home Page